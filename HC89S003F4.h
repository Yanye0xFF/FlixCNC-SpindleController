#ifndef __HC89S003_H__
#define __HC89S003_H__

typedef signed char 			s8;
typedef signed int 				s16;
typedef signed long 			s32;

typedef unsigned char 			u8;
typedef unsigned int  			u16;
typedef unsigned long 			u32;

typedef volatile unsigned char 	vu8;
typedef volatile unsigned int  	vu16;
typedef volatile unsigned long 	vu32;

typedef enum
{
	FALSE = 0,			//假
	TRUE = !FALSE		//真
}bool;

typedef enum
{
	RESET = 0,			//设置
	SET = !RESET		//重置
}FlagStatus;

typedef enum
{
	DISABLE = 0,		//失能
	ENABLE = !DISABLE	//使能
}FunctionalState;

typedef enum
{
	ERROR = 0,			//出错
	SUCCESS = !ERROR	//成功
}ErrorStatus;

/*****************************************************************************************************************/
/**************************************************EA*************************************************************/
/*****************************************************************************************************************/
#define EA_Enable()					EA=1						//打开总中断
#define EA_Disable()				EA=0				 		//关闭总中断
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/

/*****************************************************************************************************************/
/*************************************************CPU*************************************************************/
/*****************************************************************************************************************/
sfr PSW        = 0xD0;												//程序状态寄存器            
sfr ACC        = 0xE0;												//累加器
sfr B 	       = 0xF0;												//寄存器
sfr SP         = 0x81;												//堆栈指针
sfr16 DPTR     = 0x82;												//数据指针总
sfr DPL        = 0x82;												//数据指针L
sfr DPH        = 0x83;												//数据指针H
sfr INSCON     = 0xA2;												//数据指针选择寄存器

sbit CY        = PSW^7;
sbit AC        = PSW^6;
sbit F0        = PSW^5;
sbit RS1       = PSW^4;
sbit RS0       = PSW^3;
sbit OV        = PSW^2;
sbit F1        = PSW^1;
sbit P         = PSW^0;
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/***********************************************SYS CLOCK*********************************************************/
/*****************************************************************************************************************/
sfr     CLKCON     					= 0x8F;							//时钟控制寄存器
sfr     CLKSWR     					= 0x8E;							//时钟选择寄存器
#define CLKDIV						(*(vu8 xdata *)0xFE91)			//CPU时钟分频系数寄存器
#define CLKOUT						(*(vu8 xdata *)0xFE93)			//时钟输出寄存器寄存器
#define CLKO_MAP					(*(vu8 xdata *)0xFF8F)			//时钟输出端口映射控制寄存器
#define CLK_HSRC_RDY				((u8)0x20)						//内部高频RC振荡器状态位
#define CLK_LSRC_RDY				((u8)0x10)						//内部低频RC振荡器状态位
#define CLK_HSRC_EN					((u8)0x02)						//内部高频RC振荡器使能位
#define CLK_SYS_STA					((u8)0xC0)						//系统时钟状态位
#define CLK_SYS_SEL					((u8)0x30)						//系统时钟选择位
#define CLK_RC32M_DIV				((u8)0x03)						//内部高频RC分频系数
#define CLK_OSC_DIV					((u8)0xFF)						//系统时钟分频系数
#define CLK_OUT_EN					((u8)0x10)						//时钟输出使能位
#define CLK_OUT_SEL					((u8)0x07)						//时钟输出选择位
#define CLK_CLKCON_RESET_VALUE		((u8)0x02)						//时钟控制寄存器初始化寄存器值
#define CLK_CLKSWR_RESET_VALUE		((u8)0x13)						//时钟选择寄存器初始化寄存器值
#define CLK_CLKDIV_RESET_VALUE		((u8)0x02)						//时钟分频寄存器初始化寄存器值
#define CLK_CLKOUT_RESET_VALUE		((u8)0x00)						//时钟输出寄存器初始化寄存器值
#define CLK_CLKOMAP_RESET_VALUE		((u8)0x37)						//时钟输出管脚映射寄存器初始化寄存器值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/

			  
/*****************************************************************************************************************/
/*************************************************WDT*************************************************************/
/*****************************************************************************************************************/
sfr		WDTC   						= 0xBD;							//WDT 控制寄存器
#define WDTCCR             			(*(vu8 xdata *)0xFEA0)			//WDT 计数比较寄存器	
#define WDT_RST						((u8)0x40)						//WDT 复位允许位
#define WDT_F						((u8)0x20)						//WDT 中断请求标志位
#define WDT_CLR						((u8)0x10)						//WDT 计数清零位
#define WDT_PD						((u8)0x08)						//WDT 空闲/掉电模式下运行控制位
#define WDT_PS						((u8)0x07)						//WDT 定时器时钟源分频选择位
#define WDR_EWDT					((u8)0x20)						//WDT 中断允许位
#define WDT_WDTC_RESET_VALUE		((u8)0x4F)						//WDT 控制寄存器初始化寄存器值
#define WDT_WDTCCR_RESET_VALUE		((u8)0xFF)						//WDT 计数比较寄存器初始化寄存器值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************LVD*************************************************************/
/*****************************************************************************************************************/
sfr		LVDC						= 0xBB;							//LVD控制寄存器
#define LVDDBC						(*(vu8 xdata *)0xFEA7)			//LVD去抖控制寄存器
#define LVD_EN						((u8)0x80)						//LVD使能位
#define LVD_S						((u8)0x40)						//LVD检测选择位
#define LVD_IE						((u8)0x20)						//LVD中断允许位
#define LVD_F						((u8)0x08)						//LVD低电压检测标志位
#define LVD_V						((u8)0x07)						//LVD的VDD电压检测电压点选择位
#define LVD_LVDC_RESET_VALUE		((u8)0x00)						//LVD控制寄存器初始化值
#define LVD_LVDDBC_RESET_VALUE		((u8)0x00)						//LVD去抖控制寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************CRC*************************************************************/
/*****************************************************************************************************************/
sfr16	CRCR						= 0xBE;							//CRC运算结果16位读取
sfr		CRCL						= 0xBE;							//CRC运算结果低8位
sfr		CRCH						= 0xBF;							//CRC运算结果高8位
#define CRCC						(*(vu8 xdata *)0xFEA2)			//CRC控制寄存器
#define CRC_BIT						((u8)0x04)						//CRCBIT翻转控制位
#define CRC_RSV						((u8)0x02)						//CRC复位初值
#define CRC_RST						((u8)0x01)						//CRC计算器复位控制位
#define CRC_CRCC_RESET_VALUE		((u8)0x00)						//CRC 控制寄存器初始化值
#define CRC_CRCR_RESET_VALUE		((u8)0x0000)					//CRC 数据寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************ADC*************************************************************/
/*****************************************************************************************************************/
sfr		ADCC0						= 0xB4;							//ADC控制寄存器0
sfr		ADCC1						= 0xB5;							//ADC控制寄存器1
sfr16	ADCR						= 0xB6;							//ADC结果16位寄存器
sfr		ADCRL						= 0xB6;							//ADC结果8位寄存器L
sfr		ADCRH						= 0xB7;							//ADC结果8位寄存器H
#define ADCWC						(*(vu8 xdata *)0xFE98)			//ADC唤醒控制寄存器
#define ADCC2						(*(vu8 xdata *)0xFE9B)			//ADC控制寄存器2
#define ADC_EN						((u8)0x80)						//ADC模块电源控制位
#define ADC_ST						((u8)0x40)						//ADC启动控制位
#define ADC_IF						((u8)0x20)						//ADC中断标志
#define ADC_VREFO					((u8)0x08)						//ADC的VREF输出使能位
#define ADC_VREFS					((u8)0x04)						//ADC的VREF源选择位
#define ADC_INREFS					((u8)0x03)						//ADC内部参考电压选择位
#define ADC_ICHS					((u8)0xC0)						//ADC内部输入通道选择
#define ADC_XCHS					((u8)0x0F)						//ADC外部输入通道选择
#define ADC_L						((u8)0x80)						//ADC转换数据长度
#define ADC_ALIGN					((u8)0x40)						//ADC数据对其方向控制位
#define ADC_TS						((u8)0x38)						//ADC时钟匹配
#define ADC_S						((u8)0x07)						//ADC时钟选择位
#define ADC_AMWEN					((u8)0x80)						//ADC唤醒模块允许位
#define ADC_AMWIF					((u8)0x40)						//ADC唤醒模块中断标志位
#define ADC_ADCC0_RESET_VALUE		((u8)0x03)						//ADC控制寄存器0初始化值
#define ADC_ADCC1_RESET_VALUE		((u8)0x00)						//ADC控制寄存器1初始化值
#define ADC_ADCC2_RESET_VALUE		((u8)0x00)						//ADC控制寄存器2初始化值
#define ADC_ADCR_RESET_VALUE		((u16)0x0000)					//ADC结果寄存器初始化值
#define ADC_ADCWC_RESET_VALUE		((u8)0x00)						//ADC唤醒控制寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************POWER***********************************************************/
/*****************************************************************************************************************/
sfr		PCON						= 0x87;							//电源控制寄存器
#define	POWER_GIF1					((u8)0x08)						//用户标志位1
#define	POWER_GIF0					((u8)0x04)						//用户标志位0
#define POWER_PD					((u8)0x02)						//掉电模式控制位
#define POWER_IDL					((u8)0x01)						//空闲模式控制位
#define POWER_PCON_RESET_VALUE		((u8)0x00)						//电源控制寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************SPI*************************************************************/
/*****************************************************************************************************************/
sfr		SPDAT						= 0xAB;                        	//SPI数据寄存器
sfr		SPCTL						= 0xAC;							//SPI控制寄存器
sfr		SPSTAT						= 0xAD;							//SPI状态寄存器
#define SS_MAP                		(*(vu8 xdata *)0xFFA4)			//SPI的SS输出管脚映射寄存器
#define SCK_MAP             		(*(vu8 xdata *)0xFFA5)			//SPI的SCK输出管脚映射寄存器
#define MOSI_MAP           			(*(vu8 xdata *)0xFFA6)			//SPI的MOSI输出管脚映射寄存器
#define MISO_MAP          			(*(vu8 xdata *)0xFFA7)			//SPI的MISO输出管脚映射寄存器
#define SPI_SSIG					((u8)0x80)	 					//SS引脚使能位
#define SPI_SPEN					((u8)0x40)	  					//SPI使能位
#define SPI_DORD					((u8)0x20)	 					//SPI传送方向选择位
#define SPI_MSTR					((u8)0x10)	  					//SPI主/从机模式选择位
#define SPI_CPOL					((u8)0x08)	  					//SPI时钟极性选择位
#define SPI_CPHA					((u8)0x04)	  					//SPI时钟相位选择位
#define SPI_SPR				  		((u8)0x03)	  					//SPI时钟速率选择控制位
#define SPI_SPIF					((u8)0x80)	  					//SPI传输完成标志位
#define SPI_WCOL					((u8)0x40)	  					//SPI写冲突标志位
#define SPI_RXOV					((u8)0x20)	 					//SPI接收溢出标志位
#define SPI_MODF					((u8)0x10)	  					//模式故障标志位
#define SPI_SPDAT_RESET_VALUE		((u8)0x00)	  					//SPI数据寄存器初始化值
#define SPI_SPCTL_RESET_VALUE		((u8)0x00)	  					//SPI控制寄存器初始化值
#define SPI_SPSTAT_RESET_VALUE		((u8)0x00)	  					//SPI状态寄存器初始化值
#define SPI_SSMAP_RESET_VALUE		((u8)0x37)						//SPI的SS输出管脚映射寄存器初始化值
#define SPI_SCKMAP_RESET_VALUE		((u8)0x37)						//SPI的SCK输出管脚映射寄存器初始化值
#define SPI_MOSIMAP_RESET_VALUE		((u8)0x37)						//SPI的MOSI输出管脚映射寄存器初始化值
#define SPI_MISOMAP_RESET_VALUE		((u8)0x37)						//SPI的MISO输出管脚映射寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************RST*************************************************************/
/*****************************************************************************************************************/
sfr		RSTFR						= 0xF8;							//复位标志寄存器
#define BORC						(*(vu8 xdata *)0xFEA4)			//BOR电压检测控制寄存器
#define RSTDBC						(*(vu8 xdata *)0xFEAA)			//外部RST去抖控制寄存器 RSTDBC
#define BORDBC						(*(vu8 xdata *)0xFEA5)			//BOR电压检测去抖控制寄存器
#define SPOV_RSTEN					(*(vu8 xdata *)0xFE95)			//堆栈溢出复位使能寄存器

sbit 	PORF     					= RSTFR^7;
sbit 	EXRSTF    					= RSTFR^6;
sbit 	BORF      					= RSTFR^5;
sbit 	WDTRF     					= RSTFR^4;
sbit 	SWRF      					= RSTFR^3;
sbit 	SPOVF     					= RSTFR^1;
sbit 	PLVRSTF   					= RSTFR^0;

#define RST_PORF					((u8)0x80)						//上电复位标志位
#define RST_EXRSTF					((u8)0x40)						//外部复位标志位
#define RST_BORF					((u8)0x20)						//欠压复位标志位
#define RST_WDTRF					((u8)0x10)						//WDT复位标志位
#define RST_SWRF					((u8)0x08)						//软件复位标志位
#define RST_SPOVF					((u8)0x02)						//堆栈溢出复位标志位
#define RST_PLVRSTF					((u8)0x01)						//外部端口电压检测复位标志位
#define RST_BOREN					((u8)0x80)						//BOR使能位
#define RST_BOR_DBC_EN				((u8)0x40)						//BOR消抖使能位
#define RST_BORVS					((u8)0x07)						//BOR检测电压点选择位
#define RST_SPOV_RSTEN				((u8)0x01)						//堆栈溢出复位使能位
#define	RST_RSTFR_RESET_VALUE		((u8)0x00)						//复位标志寄存器初始化值
#define	RST_BORC_RESET_VALUE		((u8)0x80)						//BOR电压检测控制寄存器初始化值
#define	RST_BORDBC_RESET_VALUE		((u8)0x00)						//BOR 电压检测去抖控制寄存器初始化值
#define RST_RSTDBC_RESET_VALUE		((u8)0xFF)						//外部 RST 去抖控制寄存器初始化值
#define RST_SPOV_RSTEN_RESET_VALUE	((u8)0x00)						//堆栈溢出复位使能寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/***********************************************FLASH*************************************************************/
/*****************************************************************************************************************/
sfr		IAP_ADDRL					= 0xF9;							//IAP低8位地址寄存器
sfr		IAP_ADDRH					= 0xFA;							//IAP高8位地址寄存器
sfr16	IAP_ADDR					= 0xF9;							//IAP全16位地址寄存器
sfr		IAP_CMDL					= 0xFC;							//IAP低8位命令寄存器
sfr		IAP_CMDH					= 0xFD;							//IAP高8位命令寄存器
sfr16	IAP_CMD						= 0xFC;							//IAP全16位命令寄存器
sfr		IAP_DATA					= 0xFB;							//IAP数据寄存器 
#define FREQ_CLK					(*(vu8 xdata *)0xFE92)			//IAP时钟频率寄存器
#define IAP_ADDR_RESET_VALUE		((u16)0x3FFF)					//IAP全16位地址寄存器初始化值
#define IAP_CMD_RESET_VALUE			((u16)0x0000)					//IAP全16位地址寄存器初始化值
#define IAP_DATA_RESET_VALUE		((u8)0x00)						//IAP数据寄存器初始化值
#define IAP_FREQ_CLK_RESET_VALUE	((u8)0x00)						//IAP时钟频率寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************I/O*************************************************************/
/*****************************************************************************************************************/
sfr		P0 							= 0x80;							//P0端口数据寄存器
sfr		P1 							= 0x90;							//P1端口数据寄存器
sfr		P2 							= 0xA0;							//P2端口数据寄存器
#define PM0F						(*(vu32 xdata *)0xFF00)			//P0端口功能选择寄存器总
#define P0M0						(*(vu8 xdata *)0xFF00)			//P0端口功能选择寄存器0
#define P0M1						(*(vu8 xdata *)0xFF01)			//P0端口功能选择寄存器1
#define P0M2						(*(vu8 xdata *)0xFF02)			//P0端口功能选择寄存器2
#define P0M3						(*(vu8 xdata *)0xFF03)			//P0端口功能选择寄存器3
#define PM1F						(*(vu8 xdata *)0xFF08)			//P1端口功能选择寄存器总
#define P1M0						(*(vu8 xdata *)0xFF08)			//P1端口功能选择寄存器0
#define PM2F						(*(vu32 xdata *)0xFF10)			//P2端口功能选择寄存器总
#define P2M0						(*(vu8 xdata *)0xFF10)			//P2端口功能选择寄存器0
#define P2M1						(*(vu8 xdata *)0xFF11)			//P2端口功能选择寄存器1
#define P2M2						(*(vu8 xdata *)0xFF12)			//P2端口功能选择寄存器2
#define P2M3						(*(vu8 xdata *)0xFF13)			//P2端口功能选择寄存器3
#define P0LPU						(*(vu8 xdata *)0xFF05)			//P02端口上拉电阻选择寄存器
#define P00DBC						(*(vu8 xdata *)0xFF40)			//P00端口消抖控制寄存器 
#define P01DBC						(*(vu8 xdata *)0xFF41)			//P01端口消抖控制寄存器
#define P02DBC						(*(vu8 xdata *)0xFF42)			//P02端口消抖控制寄存器

sbit 	P0_0      					= P0^0;
sbit 	P0_1      					= P0^1;
sbit 	P0_2      					= P0^2;
sbit 	P0_3      					= P0^3;
sbit 	P0_4      					= P0^4;
sbit 	P0_5      					= P0^5;
sbit 	P0_6      					= P0^6;
sbit 	P0_7      					= P0^7;

sbit 	P1_0      					= P1^0;
sbit 	P1_1      					= P1^1;

sbit 	P2_0      					= P2^0;
sbit 	P2_1      					= P2^1;
sbit 	P2_2      					= P2^2;
sbit 	P2_3      					= P2^3;
sbit 	P2_4      					= P2^4;
sbit 	P2_5      					= P2^5;
sbit 	P2_6      					= P2^6;
sbit 	P2_7      					= P2^7;

#define GPIO_P00M					((u8)0x03)						//P00端口功能选择位
#define GPIO_P01M					((u8)0x30)						//P01端口功能选择位
#define GPIO_P02M					((u8)0x03)						//P02端口功能选择位
#define GPIO_P03M					((u8)0x30)						//P03端口功能选择位
#define GPIO_P04M					((u8)0x03)						//P04端口功能选择位
#define GPIO_P05M					((u8)0x30)						//P05端口功能选择位
#define GPIO_P06M					((u8)0x03)						//P06端口功能选择位
#define GPIO_P07M					((u8)0x30)						//P07端口功能选择位
#define GPIO_P10M					((u8)0x03)						//P10端口功能选择位
#define GPIO_P11M					((u8)0x30)						//P11端口功能选择位
#define GPIO_P20M					((u8)0x03)						//P20端口功能选择位
#define GPIO_P21M					((u8)0x30)						//P21端口功能选择位
#define GPIO_P22M					((u8)0x03)						//P22端口功能选择位
#define GPIO_P23M					((u8)0x30)						//P23端口功能选择位
#define GPIO_P24M					((u8)0x03)						//P24端口功能选择位
#define GPIO_P25M					((u8)0x30)						//P25端口功能选择位
#define GPIO_P26M					((u8)0x03)						//P26端口功能选择位
#define GPIO_P27M					((u8)0x30)						//P27端口功能选择位
#define GPIO_P02PU					((u8)0x30)						//P02端口上拉电阻选择位
#define GPIO_P0xDBCLK				((u8)0xC0)						//P0x端口消抖时钟选择
#define GPIO_P0xDBCT				((u8)0x3F)						//P0x端口消抖计数时钟个数
#define GPIO_P0_RESET_VALUE			((u8)0x00)						//P0端口数据寄存器初始化值
#define GPIO_P1_RESET_VALUE			((u8)0x00)						//P1端口数据寄存器初始化值
#define GPIO_P2_RESET_VALUE			((u8)0x00)						//P2端口数据寄存器初始化值
#define GPIO_PM0F_RESET_VALUE		((u32)0x33333333)				//P0端口功能选择寄存器初始化值
#define GPIO_PM1F_RESET_VALUE		((u8)0x33)						//P1端口功能选择寄存器初始化值
#define GPIO_PM2F_RESET_VALUE		((u32)0x33333333)				//P2端口功能选择寄存器初始化值
#define GPIO_P0LPU_RESET_VALUE		((u8)0x00)						//P02端口上拉电阻选择寄存初始化值
#define GPIO_P00DBC_RESET_VALUE		((u8)0x00)						//P00端口消抖控制寄存器始化值
#define GPIO_P01DBC_RESET_VALUE		((u8)0x00)						//P01端口消抖控制寄存器初始化值
#define GPIO_P02DBC_RESET_VALUE		((u8)0x00)						//P02端口消抖控制寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************PWM0-2**********************************************************/
/*****************************************************************************************************************/
sfr		PWM0C						= 0xDA;							//PWM0控制寄存器
sfr		PWM1C						= 0xDB;							//PWM1控制寄存器
sfr		PWM2C						= 0xDC;							//PWM2控制寄存器
sfr		PWM0EN						= 0xE1;							//PWM0使能寄存器
sfr16	PWM0P						= 0xE2;							//PWM0周期寄存器
sfr		PWM0PL						= 0xE2;							//PWM0周期寄存器低八位
sfr		PWM0PH						= 0xE3;							//PWM0周期寄存器高八位
sfr16	PWM0D						= 0xE4;							//PWM0占空比寄存器
sfr		PWM0DL						= 0xE4;							//PWM0占空比寄存器低八位
sfr		PWM0DH						= 0xE5;							//PWM0占空比寄存器高八位
sfr16	PWM0DT						= 0xE6;							//PWM0死区时间寄存器
sfr		PWM0DTL						= 0xE6;							//PWM0死区时间寄存器低八位
sfr		PWM0DTH						= 0xE7;							//PWM0死区时间寄存器高八位
sfr		PWM1EN						= 0xE9;							//PWM1使能寄存器
sfr16	PWM1P						= 0xEA;							//PWM1周期寄存器
sfr		PWM1PL						= 0xEA;							//PWM1周期寄存器低八位
sfr		PWM1PH						= 0xEB;							//PWM1周期寄存器高八位
sfr16	PWM1D						= 0xEC;							//PWM1占空比寄存器
sfr		PWM1DL						= 0xEC;							//PWM1占空比寄存器低八位
sfr		PWM1DH						= 0xED;							//PWM1占空比寄存器高八位
sfr16	PWM1DT						= 0xEE;							//PWM1死区时间寄存器
sfr		PWM1DTL						= 0xEE;							//PWM1死区时间寄存器低八位
sfr		PWM1DTH						= 0xEF;							//PWM1死区时间寄存器高八位
sfr		PWM2EN						= 0xF1;							//PWM2使能寄存器
sfr16	PWM2P						= 0xF2;							//PWM2周期寄存器
sfr		PWM2PL						= 0xF2;							//PWM2周期寄存器低八位
sfr		PWM2PH						= 0xF3;							//PWM2周期寄存器高八位
sfr16	PWM2D						= 0xF4;							//PWM2占空比寄存器
sfr		PWM2DL						= 0xF4;							//PWM2占空比寄存器低八位
sfr		PWM2DH						= 0xF5;							//PWM2占空比寄存器高八位
sfr16	PWM2DT						= 0xF6;							//PWM2死区时间寄存器
sfr		PWM2DTL						= 0xF6;							//PWM2死区时间寄存器低八位
sfr		PWM2DTH						= 0xF7;							//PWM2死区时间寄存器高八位
#define PWM0_MAP           			(*(vu8 xdata *) 0xFF90)			//PWM0输出管脚映射寄存器
#define PWM01_MAP          			(*(vu8 xdata *) 0xFF91)			//PWM01输出管脚映射寄存器
#define PWM1_MAP           			(*(vu8 xdata *) 0xFF94)			//PWM1输出管脚映射寄存器
#define PWM11_MAP          			(*(vu8 xdata *) 0xFF95)			//PWM10输出管脚映射寄存器
#define PWM2_MAP           			(*(vu8 xdata *) 0xFF98)			//PWM2输出管脚映射寄存器
#define PWM21_MAP          			(*(vu8 xdata *) 0xFF99)			//PWM20输出管脚映射寄存器
#define PWMX_FLTX_MODE				((u8)0x60)						//PWMX故障输出预定状态选择位
#define PWMX_EFLTX					((u8)0x10)						//PWMXFLT0控制引脚使能位
#define PWMX_XM						((u8)0x08)						//PWMX工作模式选择位
#define PWMX_X1_OEN					((u8)0x04)						//PWMX1输出控制位
#define PWMX_X_OEN					((u8)0x02)						//PWMX输出控制位
#define PWMX_XEN					((u8)0x01)						//PWMX模块使能控制位
#define PWMX_XIE					((u8)0x80)						//PWMX中断允许位
#define PWMX_XIF					((u8)0x40)						//PWMX中断标志位
#define PWMX_FLTXS					((u8)0x20)						//PWMXFLT状态位
#define PWMX_FLTXC					((u8)0x10)						//PWMXFLT引脚配置位
#define PWMX_XS						((u8)0x0C)						//PWMX和PWM01 输出模式选择位
#define PWMX_CKX					((u8)0x03)						//PWMX钟源选择位

#define PWMX_EN_RESET_VALUE			((u8)0x00)	  					//PWM0使能寄存器初始化值
#define PWMX_C_RESET_VALUE			((u8)0x00)	  					//PWM0控制寄存器初始化值
#define PWMX_P_RESET_VALUE			((u16)0x0000)  					//PWM0周期寄存器低八位初始化值
#define PWMX_D_RESET_VALUE			((u16)0x0000)  					//PWM0占空比寄存器低八位初始化值
#define PWMX_DT_RESET_VALUE			((u16)0x0000)  					//PWM0死区时间寄存器低八位初始化值
#define PWMX_PWMXMAP_RESET_VALUE	((u8)0x37)						//PWMX输出管脚映射寄存器初始化值
#define PWMX_PWMX1MAP_RESET_VALUE	((u8)0x37)						//PWMX1输出管脚映射寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************PWM3************************************************************/
/*****************************************************************************************************************/
sfr		PWM3C						= 0xDD;							//PWM3控制寄存器
sfr		PWM3P						= 0xDE;							//PWM3周期寄存器
sfr		PWM3D						= 0xDF;							//PWM3占空比寄存器
#define PWM3_MAP           			(*(vu8 xdata *) 0xFF9C)			//PWM3输出管脚映射寄存器
#define PWM3_EN						((u8)0x80)						//PWM3模块使能控制位
#define PWM3_IE						((u8)0x40)						//PWM3中断允许位
#define PWM3_IF						((u8)0x20)						//PWM3中断标志位
#define PWM3_OEN					((u8)0x10)						//PWM3输出使能位
#define PWM3_S						((u8)0x08)						//PWM3输出极性选择位
#define PWM3_PTCK3					((u8)0x07)						//PWM3工作时钟源选择位
#define PWM3_PWM3C_RESET_VALUE	    ((u8)0x00)	  					//PWM3控制寄存器初始化值
#define PWM3_PWM3P_RESET_VALUE	    ((u8)0x00)	  					//PWM3周期寄存器初始化值
#define PWM3_PWM3D_RESET_VALUE	    ((u8)0x00)	  					//PWM3占空比寄存器初始化值
#define PWMX_PWM3MAP_RESET_VALUE	((u8)0x37)						//PWM3输出管脚映射寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************TIMER1-0********************************************************/
/*****************************************************************************************************************/
sfr		TCON						= 0x88;							//定时器Tx(x=0,1)控制寄存器
sfr		TMOD						= 0x89;							//定时器Tx(x=0,1)工作方式寄存器
sfr		TL0							= 0x8A;							//T0数据寄存器低字节
sfr		TH0							= 0x8C;							//T0数据寄存器高字节
sfr		TL1							= 0x8B;							//T1数据寄存器低字节
sfr		TH1							= 0x8D;							//T1数据寄存器高字节
#define TCON1             			(*(vu8 xdata *) 0xFE80)			//定时器Tx(x=0,1)控制寄存器
#define T0_MAP						(*(vu8 xdata *) 0xFF80)			//T0输出管脚映射寄存器
#define T1_MAP						(*(vu8 xdata *) 0xFF81)			//T1输出管脚映射寄存器

sbit 	TF1       					= TCON^7;
sbit 	TR1       					= TCON^6;
sbit 	TF0       					= TCON^5;
sbit 	TR0       					= TCON^4;

#define TIMER_TF1					((u8)0x80)						//T1的溢出标志位
#define TIMER_TR1					((u8)0x40)						//T1的运行控制位
#define TIMER_TF0					((u8)0x20)						//T0的溢出标志位
#define TIMER_TR0					((u8)0x10)						//T0的运行控制位

#define TIMER_T1OUT					((u8)0x20)						//T1比较输出功能允许位
#define TIMER_T1X12					((u8)0x10)						//T1定时器系统时钟源分频选择位
#define TIMER_T0OUT					((u8)0x02)						//T0比较输出功能允许位
#define TIMER_T0X12					((u8)0x01)						//T0定时器系统时钟源分频选择位

#define TIMER_GATE1					((u8)0x80)						//T1门控位
#define TIMER_CT1					((u8)0x40)						//T1定时/计数功能选择位
#define TIMER_M1					((u8)0x30)						//T1工作方式选择位
#define TIMER_GATE0					((u8)0x08)						//T0门控位
#define TIMER_CT0					((u8)0x04)						//T0定时/计数功能选择位
#define TIMER_M0					((u8)0x03)						//T0工作方式选择位

#define TIMER_TCON_RESET_VALUE		((u8)0x00)						//定时器Tx(x=0,1)控制寄存器初始化值
#define TIMER_TCON1_RESET_VALUE		((u8)0x00)						//定时器Tx(x=0,1)控制寄存器初始化值
#define TIMER_TMOD_RESET_VALUE		((u8)0x00)						//定时器Tx(x=0,1)工作方式寄存器初始化值
#define TIMER_T0_RESET_VALUE		((u16)0x0000)					//定时器T0数据寄存器初始化值
#define TIMER_T1_RESET_VALUE		((u16)0x0000)					//定时器T1数据寄存器初始化值
#define TIMER_T0MAP_RESET_VALUE		((u8)0x37)						//T0输出管脚映射寄存器初始化值
#define TIMER_T1MAP_RESET_VALUE		((u8)0x37)						//T1输出管脚映射寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************TIM3************************************************************/
/*****************************************************************************************************************/
sfr		T3CON						= 0xC9;							//定时器3控制寄存器
sfr16	T3							= 0xCA;							//定时器3数据寄存器总
sfr		TL3							= 0xCA;							//定时器3数据寄存器L
sfr		TH3							= 0xCB;							//定时器3数据寄存器H
#define T3_MAP						(*(vu8 xdata *) 0xFF83)			//定时器3输出管脚映射寄存器
#define TIM3_TF3					((u8)0x80)						//定时器3溢出标志位
#define TIM3_T3PD_EN				((u8)0x40)						//定时器3在掉电模式下运行控制位
#define TIM3_T3PS					((u8)0x30)						//定时器3预分频比选择位
#define TIM3_TR3					((u8)0x04)						//定时器3允许控制位
#define TIM3_T3CLKS					((u8)0x03)						//定时器3计数时钟来源选择位
#define TIM3_T3CON_RESET_VALUE		((u8)0x00)						//定时器3控制寄存器初始化值
#define TIM3_T3_RESET_VALUE			((u16)0x0000)					//定时器3数据寄存器初始化值
#define TIMER_T3MAP_RESET_VALUE		((u8)0x37)						//定时器3输出管脚映射寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/

/*****************************************************************************************************************/
/*************************************************UART************************************************************/
/*****************************************************************************************************************/
sfr 	SCON       					= 0x98;							//UART1 控制寄存器
sfr 	SBUF       					= 0x99;							//UART1 数据缓冲寄存器 
sfr 	SADDR      					= 0x9A;							//UART1 从机地址寄存器
sfr 	SADEN      					= 0x9B;							//UART1 从机地址掩码寄存器
sfr 	SCON2      					= 0x9E;							//UART1 控制寄存器
#define TXD_MAP            			(*(vu8 xdata *) 0xFFA0)  		//UART1 TXD复用端口映射
#define RXD_MAP            			(*(vu8 xdata *) 0xFFA1)  		//UART1 RXD复用端口映射
#define TXD2_MAP           			(*(vu8 xdata *) 0xFFA8)  		//UART2 TXD复用端口映射 
#define RXD2_MAP           			(*(vu8 xdata *) 0xFFA9)  		//UART2 RXD复用端口映射
#define S2CON              			(*(vu8 xdata *) 0xFE88)  		//UART2 控制寄存器 
#define S2CON2             			(*(vu8 xdata *) 0xFE89)  		//UART2 控制寄存器
#define S2BUF              			(*(vu8 xdata *) 0xFE8A)  		//UART1 数据缓冲寄存器

sbit 	FE      					= SCON^7;
sbit 	RXROV   					= SCON^6;
sbit 	TXCOL   					= SCON^5;
sbit 	REN     					= SCON^4;
sbit 	TB8     					= SCON^3;
sbit 	RB8     					= SCON^2;
sbit 	TI      					= SCON^1;
sbit 	RI      					= SCON^0;


#define UART1_FE					((u8)0x80)						//UART1 帧错误检测位
#define UART1_RXROV					((u8)0x40)						//UART1 接收溢出标志位
#define UART1_TXCOL					((u8)0x20)						//UART1 发送冲突标志位
#define UART1_REN					((u8)0x10)						//UART1	串行接收使能控制位
#define UART1_TB8					((u8)0x08)						//UART1	发送的第 9 位数据
#define UART1_RB8					((u8)0x04)						//UART1	接收的第 9 位数据
#define UART1_TI					((u8)0x02)						//UART1	发送中断标志位
#define UART1_RI					((u8)0x01)						//UART1	接收中断标志位

#define UART1_SMOD					((u8)0x80)						//UART1	模式 2波特率加倍控制位
#define UART1_UX6					((u8)0x20)						//UART1	模式 0 的通信速度设置位
#define UART1_SM0_1					((u8)0x06)						//UART1	串口工作方式选择位
#define UART1_SM2					((u8)0x01)						//UART1	多机通信使能控制位
#define UART1_SADDR					((u8)0xff)						//UART1	从机地址寄存器
#define UART1_SADEN					((u8)0xff)						//UART1	从机地址掩码寄存器

#define UART2_FE					((u8)0x80)						//UART1 帧错误检测位
#define UART2_REN					((u8)0x10)						//UART1	串行接收使能控制位
#define UART2_TB8					((u8)0x08)						//UART1	发送的第 9 位数据
#define UART2_RB8					((u8)0x04)						//UART1	接收的第 9 位数据
#define UART2_TI					((u8)0x02)						//UART1	发送中断标志位
#define UART2_RI					((u8)0x01)						//UART1	接收中断请求中断标志位

#define UART2_SM1					((u8)0x02)						//UART1	串口工作方式选择位
#define UART2_SM2					((u8)0x01)						//UART1	多机通信使能控制位

#define UART1_SCON_RESET_VALUE		((u8)0x00)						//UART1 控制寄存器
#define UART1_SCON2_RESET_VALUE		((u8)0x00)						//UART1 控制寄存器2 
#define UART1_SADDR_RESET_VALUE		((u8)0x37)						//UART1 从机地址寄存器
#define UART1_SADEN_RESET_VALUE		((u8)0x00)						//UART1 从机地址掩码寄存器

#define UART1_TXD_MAP_RESET_VALUE	((u8)0x3F)						//UART1 TXD复用端口映射
#define UART1_RXD_MAP_RESET_VALUE	((u8)0x3F)						//UART1 RXD复用端口映射
#define UART2_TXD2_MAP_RESET_VALUE	((u8)0x3F)						//UART2 TXD复用端口映射
#define UART2_RXD2_MAP_RESET_VALUE	((u8)0x3F)						//UART2 RXD复用端口映射
#define UART2_S2CON_RESET_VALUE		((u8)0x00)						//UART2 控制寄存器
#define UART2_S2CON2_RESET_VALUE	((u8)0x00)						//UART2 控制寄存器2
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************TIM4************************************************************/
/*****************************************************************************************************************/
sfr		T4CON						= 0xCC;							//定时器4控制寄存器
sfr16	T4							= 0xCD;							//定时器4数据寄存器总
sfr		TL4							= 0xCD;							//定时器4数据寄存器L
sfr		TH4							= 0xCE;							//定时器4数据寄存器H
#define T4_MAP						(*(vu8 xdata *) 0xFF84)			//定时器4输出管脚映射寄存器
#define TIM4_TF4					((u8)0x80)						//定时器4溢出标志位
#define TIM4_TC4					((u8)0x40)						//定时器4比较功能允许位
#define TIM4_T4PS					((u8)0x30)						//定时器4预分频比选择位
#define TIM4_T4M					((u8)0x0C)						//定时器4方式选择位
#define TIM4_TR4					((u8)0x02)						//定时器4允许控制位
#define TIM4_T4CLKS					((u8)0x01)						//定时器4计数时钟来源选择位
#define TIM4_T4CON_RESET_VALUE		((u8)0x00)						//定时器4控制寄存器初始化值
#define TIM4_T4_RESET_VALUE			((u16)0x0000)					//定时器4数据寄存器初始化值
#define TIMER_T4MAP_RESET_VALUE		((u8)0x37)						//定时器4输出管脚映射寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/*************************************************TIM5************************************************************/
/*****************************************************************************************************************/
sfr		T5CON						= 0xC1;							//定时器5控制寄存器
sfr16	T5							= 0xC2;							//定时器5数据寄存器总
sfr		TL5							= 0xC2;							//定时器5数据寄存器L
sfr		TH5							= 0xC3;							//定时器5数据寄存器H
sfr16	RCAP5						= 0xC4;							//定时器5重载捕获寄存器总
sfr		RCAP5L						= 0xC4;							//定时器5重载捕获寄存器L
sfr		RCAP5H						= 0xC5;							//定时器5重载捕获寄存器H
#define T5CON1						(*(vu8 xdata *) 0xFE85)			//定时器5捕获类型选择寄存器
#define T5_MAP						(*(vu8 xdata *) 0xFF85)			//定时器5输出管脚映射寄存器

#define TIM5_TF5					((u8)0x80)						//定时器5溢出标志位
#define TIM5_EXF5					((u8)0x40)						//定时器5引脚外部输入事件发生标志位
#define TIM5_T5PS					((u8)0x30)						//定时器5预分频比选择位
#define TIM5_T5M					((u8)0x0C)						//定时器5方式选择位
#define TIM5_TR5					((u8)0x02)						//定时器5允许控制位
#define TIM5_EXEN5					((u8)0x01)						//定时器5引脚上的外部事件输入用作重载/捕获触发器允许/禁止控制位
#define TIM5_CAPM					((u8)0x03)						//定时器5捕获类型选择位

#define TIM5_T5CON_RESET_VALUE		((u8)0x00)						//定时器5控制寄存器初始化值
#define TIM5_T5CON1_RESET_VALUE		((u8)0x00)						//定时器5捕获类型选择寄存器初始化值
#define TIM5_T5_RESET_VALUE			((u16)0x0000)					//定时器5数据寄存器初始化值
#define TIM5_RCAP5_RESET_VALUE		((u16)0x0000)					//定时器5重载捕获寄存器初始化值
#define TIMER_T5MAP_RESET_VALUE		((u8)0x37)						//定时器5输出管脚映射寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/


/*****************************************************************************************************************/
/***************************************************INIT**********************************************************/
/*****************************************************************************************************************/
sfr		IE							= 0xA8;							//中断允许寄存器
sfr		IE1							= 0xB8;							//中断允许寄存器
sfr		IP0							= 0xA9;							//中断优先级选择寄存器
sfr		IP1							= 0xAA;							//中断优先级选择寄存器
sfr		IP2							= 0xB9;							//中断优先级选择寄存器
sfr		IP3							= 0xBA;							//中断优先级选择寄存器
sfr16	PINTF						= 0x96;							//外部中断2-15使能控制寄存器
sfr		PINTF0						= 0x96;							//外部中断2-7使能控制寄存器
sfr		PINTF1						= 0x97;							//外部中断8-15使能控制寄存器
#define PITS						(*(vu32 xdata *)0xFEB0)			//外部中断电平选择寄存器总
#define PITS0						(*(vu8 xdata *)0xFEB0)			//外部中断电平选择寄存器0
#define PITS1						(*(vu8 xdata *)0xFEB1)			//外部中断电平选择寄存器1
#define PITS2						(*(vu8 xdata *)0xFEB2)			//外部中断电平选择寄存器2
#define PITS3						(*(vu8 xdata *)0xFEB3)			//外部中断电平选择寄存器3
#define PINTE						(*(vu16 xdata *)0xFEB8)			//外部中断使能控制寄存器总
#define PINTE0						(*(vu8 xdata *)0xFEB8)			//外部中断使能控制寄存器0
#define PINTE1						(*(vu8 xdata *)0xFEB9)			//外部中断使能控制寄存器1
#define INT01_PINS					(*(vu8 xdata *)0xFEBC)			//外部中断0/外部中断1管脚选择寄存器

sbit 	EA        = IE^7;
sbit 	ES2       = IE^6;
sbit 	EWDT      = IE^5;
sbit 	ES1       = IE^4;
sbit 	ET1       = IE^3;
sbit 	EX1       = IE^2;
sbit 	ET0       = IE^1;
sbit 	EX0       = IE^0;

sbit 	EX8_15    = IE1^7;
sbit 	EX2_7     = IE1^6;
sbit 	EADC      = IE1^5;
sbit	ET5       = IE1^4;
sbit 	ET4       = IE1^2;
sbit 	ET3       = IE1^1;
sbit 	ESPI      = IE1^0;

#define INT_EA						((u8)0x80)						//CPU总中断允许控制位
#define INT_ES2						((u8)0x40)						//UART2中断允许位
#define INT_EWDT					((u8)0x20)						//WDT中断允许位
#define INT_ES1						((u8)0x10)						//UART1中断允许位
#define INT_ET1						((u8)0x08)						//T1中断允许位
#define INT_EX1						((u8)0x04)						//外部中断1中断允许位
#define INT_ET0						((u8)0x02)						//T0中断允许位
#define INT_EX0						((u8)0x01)						//外部中断0中断允许位

#define INT_EX8_15					((u8)0x80)						//外部中断8~15中断允许位
#define INT_EX2_7					((u8)0x40)						//外部中断2~7中断允许位
#define INT_EADC					((u8)0x20)						//A/D转换完成中断允许位
#define INT_ET5						((u8)0x10)						//T5中断允许位
#define INT_ET4						((u8)0x04)						//T4中断允许位
#define INT_ET3						((u8)0x02)						//T3中断允许位
#define INT_ESPI					((u8)0x01)						//SPI中断允许位

#define INT_PT1						((u8)0xC0)						//T1中断优先级控制位
#define INT_PX1						((u8)0x30)						//INT1中断优先级控制位
#define INT_PT0						((u8)0x0C)						//T0中断优先级控制位
#define INT_PX0						((u8)0x03)						//INT0中断优先级控制位

#define INT_PS2						((u8)0xC0)						//UART2中断优先级控制位
#define INT_PLVD					((u8)0x30)						//LVD中断优先级控制位
#define INT_PWDT					((u8)0x0C)						//WDT中断优先级控制位
#define INT_PS1						((u8)0x03)						//UART1中断优先级控制位

#define INT_PPWM					((u8)0xC0)						//PWM中断优先级控制位
#define INT_PT4						((u8)0x30)						//T4中断优先级控制位
#define INT_PT3						((u8)0x0C)						//T3中断优先级控制位
#define INT_PSPI					((u8)0x03)						//SPI中断优先级控制位

#define INT_PX8_15					((u8)0xC0)						//INT8_15中断优先级控制位
#define INT_PX2_7					((u8)0x30)						//INT2_7中断优先级控制位
#define INT_PADC					((u8)0x0C)						//ADC中断优先级控制位
#define INT_PT5						((u8)0x03)						//T5中断优先级控制位

#define INT_IT15					((u8)0xC0)						//外部中断T15触发沿选择位
#define INT_IT14					((u8)0x30)						//外部中断T14触发沿选择位
#define INT_IT13					((u8)0x0C)						//外部中断T13触发沿选择位
#define INT_IT12					((u8)0x03)						//外部中断T12触发沿选择位
#define INT_IT11					((u8)0xC0)						//外部中断T11触发沿选择位
#define INT_IT10					((u8)0x30)						//外部中断T10触发沿选择位
#define INT_IT9						((u8)0x0C)						//外部中断T9触发沿选择位
#define INT_IT8						((u8)0x03)						//外部中断T8触发沿选择位
#define INT_IT7						((u8)0xC0)						//外部中断T7触发沿选择位
#define INT_IT6						((u8)0x30)						//外部中断T6触发沿选择位
#define INT_IT5						((u8)0x0C)						//外部中断T5触发沿选择位
#define INT_IT4						((u8)0x03)						//外部中断T4触发沿选择位
#define INT_IT3						((u8)0xC0)						//外部中断T3触发沿选择位
#define INT_IT2						((u8)0x30)						//外部中断T2触发沿选择位
#define INT_IT1						((u8)0x0C)						//外部中断T1触发沿选择位
#define INT_IT0						((u8)0x03)						//外部中断T0触发沿选择位

#define INT_EINT15					((u8)0x80)						//INT15中断中断控制位
#define INT_EINT14					((u8)0x40)						//INT14中断中断控制位
#define INT_EINT13					((u8)0x20)						//INT13中断中断控制位
#define INT_EINT12					((u8)0x10)						//INT12中断中断控制位
#define INT_EINT11					((u8)0x08)						//INT11中断中断控制位
#define INT_EINT10					((u8)0x04)						//INT10中断中断控制位
#define INT_EINT9					((u8)0x02)						//INT9中断中断控制位
#define INT_EINT8					((u8)0x01)						//INT8中断中断控制位
#define INT_EINT7					((u8)0x80)						//INT7中断中断控制位
#define INT_EINT6					((u8)0x40)						//INT6中断中断控制位
#define INT_EINT5					((u8)0x20)						//INT5中断中断控制位
#define INT_EINT4					((u8)0x10)						//INT4中断中断控制位
#define INT_EINT3					((u8)0x08)						//INT3中断中断控制位
#define INT_EINT2					((u8)0x04)						//INT2中断中断控制位

#define INT_INT15F					((u8)0x80)						//INT15中断请求标志位
#define INT_INT14F					((u8)0x40)						//INT14中断请求标志位
#define INT_INT13F					((u8)0x20)						//INT13中断请求标志位
#define INT_INT12F					((u8)0x10)						//INT12中断请求标志位
#define INT_INT11F					((u8)0x08)						//INT11中断请求标志位
#define INT_INT10F					((u8)0x04)						//INT10中断请求标志位
#define INT_INT9F					((u8)0x02)						//INT9中断请求标志位
#define INT_INT8F					((u8)0x01)						//INT8中断请求标志位
#define INT_INT7F					((u8)0x80)						//INT7中断请求标志位
#define INT_INT6F					((u8)0x40)						//INT6中断请求标志位
#define INT_INT5F					((u8)0x20)						//INT5中断请求标志位
#define INT_INT4F					((u8)0x10)						//INT4中断请求标志位
#define INT_INT3F					((u8)0x08)						//INT3中断请求标志位
#define INT_INT2F					((u8)0x04)						//INT2中断请求标志位
#define INT_INT1F					((u8)0x02)						//INT1中断请求标志位
#define INT_INT0F					((u8)0x01)						//INT0中断请求标志位

#define INT_INT1_PINS				((u8)0x02)						//INT1管脚选择位
#define INT_INT0_PINS				((u8)0x01)						//INT0管脚选择位

#define INT_IE_RESET_VALUE			((u8)0x00)						//中断允许寄存器IE初始化值
#define INT_IE1_RESET_VALUE			((u8)0x00)						//中断允许寄存器IE1初始化值
#define INT_IP0_RESET_VALUE			((u8)0x00)						//中断优先级选择寄存器IP0初始化值
#define INT_IP1_RESET_VALUE			((u8)0x00)						//中断优先级选择寄存器IP1初始化值
#define INT_IP2_RESET_VALUE			((u8)0x00)						//中断优先级选择寄存器IP2初始化值
#define INT_IP3_RESET_VALUE			((u8)0x00)						//中断优先级选择寄存器IP3初始化值
#define INT_PITS_RESET_VALUE		((u32)0x00000000)				//外部中断触发沿选择位初始化值
#define INT_PINTE_RESET_VALUE		((u16)0x0000)					//外部中断2-15使能控制寄存器初始化值
#define INT_PINTF_RESET_VALUE		((u16)0x0000)					//外部中断标志寄存器寄存器初始化值
#define INT_INT01_PINS_RESET_VALUE	((u8)0x00)						//外部中断01管脚选择寄存器初始化值
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/

//大端小端转化函数
#define Tranverse16(X)	((((u16)(X)&0xff00)>>8)|(((u16)(X)&0x00ff)<<8))
#define Tranverse32(X)	((((u32)(X)&0xff000000)>>24)|(((u32)(X)&0x00ff0000)>>8)|(((u32)(X)&0x0000ff00)<<8)|(((u32)(X)&0x000000ff)<<24))

/*------------------------------------------------
Interrupt Vectors:
Interrupt Address = (Number * 8) + 3
------------------------------------------------*/
#define INT0_VECTOR    0   /* 0x03 EXTERNal Interrupt 0 */
#define TIMER0_VECTOR  1   /* 0x0B Timer 0 */
#define INT1_VECTOR    2   /* 0x13 EXTERNal Interrupt 1 */
#define TIMER1_VECTOR  3   /* 0x1B Timer 1 */
#define UART1_VECTOR   4   /* 0x23 Serial port 1 */
#define WDT_VECTOR     5   /* 0x2B WDT */
#define LVD_VECTOR     6   /* 0x33 LVD */
#define UART2_VECTOR   7   /* 0x3B Serial port 2 */
#define SPI_VECTOR     8   /* 0x43 SPI */
#define T3_VECTOR      9   /* 0x4B Timer 3 */
#define T4_VECTOR      10  /* 0x53 Timer 4 */
#define PWM_VECTOR     11  /* 0x5B PWM */
#define T5_VECTOR      12  /* 0x63 Timer 5 */
#define ADC_VECTOR     13  /* 0x6B ADC */
#define INT2_7_VECTOR  14  /* 0x73 INT2~INT7 */
#define INT8_15_VECTOR 15  /* 0x7B INT8~INT15 */

#endif